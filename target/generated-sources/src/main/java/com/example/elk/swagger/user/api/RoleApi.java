/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.elk.swagger.user.api;

import com.example.elk.swagger.user.model.RoleRequest;
import com.example.elk.swagger.user.model.RoleResponse;
import com.example.elk.swagger.user.model.RolesResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Role", description = "the Role API")
public interface RoleApi {

    /**
     * POST /roles : Add a role
     *
     * @param roleRequest Add a new role (required)
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "addRole",
        summary = "Add a role",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  RoleResponse.class)))
        },
        security = {
            @SecurityRequirement(name = "Authorization")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/roles",
        produces = "application/json",
        consumes = "application/json"
    )
    ResponseEntity<RoleResponse> addRole(
        @Parameter(name = "RoleRequest", description = "Add a new role", required = true, schema = @Schema(description = "")) @Valid @RequestBody RoleRequest roleRequest
    );


    /**
     * GET /roles : Get all roles
     *
     * @return Success (status code 200)
     */
    @Operation(
        operationId = "getRoles",
        summary = "Get all roles",
        tags = { "Role" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  RolesResponse.class)))
        },
        security = {
            @SecurityRequirement(name = "Authorization")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/roles",
        produces = "application/json"
    )
    ResponseEntity<RolesResponse> getRoles(
        
    );

}
